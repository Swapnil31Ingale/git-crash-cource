echo "git-crash-cource" >> README.md
git init
git add README.md
git commit -m "First commit"
git remote add origin https://github.com/Swapnil31Ingale/git-crash-cource.git
git branch -M main # -M: Force rename the current branch to main, even if it already exists.
#git branch -m main # -m: Rename the current branch to main, but will not overwrite an existing main branch.
#git branch -a # List all branches, including remote branches.  
git push -u origin main 
#-u / --set-upstream: Links your local main branch to origin/main, so future commands like git push or git pull will know 
#where to go without needing to specify the remote and branch every time.
#git push     # instead of git push origin main
#git pull     # instead of git pull origin main

git remote -v
git remote add upstream https://github.com/Swapnil31Ingale/git-crash-cource.git

<<<<<<< HEAD
=======
git branch --set-upstream:main origin/main # Set the upstream branch for the current branch to origin/main
git branch -vv # Show all branches with their upstream tracking information and last commit

>>>>>>> origin/test
git branch feature # Create a new branch named feature without switching to it
git checkout feature # Switch to the feature branch

git checkout -b feature1 # Create and switch to a new branch named feature1

git stash # Stash changes in the working directory, saving them for later
git stash pop # Apply the stashed changes back to the working directory

git revert <commit-hash> # Create a new commit that undoes the changes made by the specified commit
git reset --hard <commit-hash> # Reset the current branch to the specified commit, discarding all changes after that commit
git reset --soft <commit-hash> # Reset the current branch to the specified commit, keeping changes in the working directory
git reset --mixed <commit-hash> # Reset the current branch to the specified commit, keeping changes in the staging area

git rebase main # Reapply commits from the current branch {test} on top of the main branch, it maintains all the commit history.
git rebase --abort # Abort the rebase process if you encounter conflicts or decide not to
git rebase -i main # Interactively rebase, allowing you to edit, squash, or reorder commits
git rebase --continue # Continue the rebase after resolving conflicts



